We can Use List,Tuple and set to represent a group of individual objects as a single entity.
If we want to represent a group of objects as key-value pairs then we should go for dictionary.

     Eg.  
          rollno ------- name
          ph no -------- address
          ipaddress --------- domain name




Duplicates are not allowed but values can be Duplicated.
Hetrogeneous objects are allowed for both kay and values.
Insertion order is not preserved.
Dictionary is mutable.
Dictionary are dynamic
Indexing and Slicing concept are not applicable.

NOTE :
   c++ and Java - Dictionary concept name -> Map 
   Ruby and Perl - Dictionary concept name -> Hash 

   Create Dictionary :
   d = {} -> empty dictionary
   d = dict() ->  empty dictionary

If we know data in advance then we can create dictionary as follows 
d = {100: 'Prodip', 200: 'Rahul', 300: 'Basu', 400: 'Prodip'}
d = {key:value,key:value}



Access Data from Dictionary :
 
    We can access data by using keys.
    If the specified key is not available then we will get KeyError.
    We can prevent this by checking whether key is already available or not by using has_key() function or by using in operator.
    d.has_key(500) -> Returns 1 if key is available otherwise returns 0 
    But has_key() function is available only Python 2 but not in Python 3 .Hence compulsory we have to use in operator.

                if 500 in d :
                  print(d[500])

How to update Dictionary :
       
       d[key] = value
       If the key is not available then a new entry will be added to the dictionary with the specified key-value pair.
       If the key is already available then old value will be replaced with new value.


How to Delete elements from Dictionary :
     1. del d[key]
     2. d.clear()
     3. del d 
     

     del d[key] :
        It deletes entry associated with the specified key.
        If the key is not available then we will get KeyError.
     
     d.clear() :
      To remove all entries from the dictionary.

      del d :
      To delete total dictionary . Now we can not access d .


Important functions of Dictionary :
     1. dict() -> To create dictionary .It creates dictionary with the list of tuple elements 
     2. len()
     3. clear()
     4. get()
     5. pop()
     6. popitem()
     7. keys()
     8. values()
     9. items()
    10. copy()
    11. setdefault()
    12. update()


       get() :
         
          To get the value associated with the key.
          d.get(key) -> If key is available then returns the corresponding value otherwise returns None.It won't raise any error.
          d.get(key,defaultvalue) -> If the key is available then returns the corresponding value otherwise returns defaultvalue. 



       pop() :
          
          d.pop(key)
             It removes the entry associated with the specified key and returns the corresponding value.
             If the specified key is not available the will get KeyError.


      popitem() :
         
           It removes an arbitary item(key-value) from the dictionary and returns it.
           If the dictionary is empty then we will get KeyError.
                  d ={}
                  print(d.popitem())


      keys() :
       
          It returns all keys associated with dictionary .
      
      values() :
          
            It returns all values associated with dictionary .


      items() :
         
          It returns list of tupled representing key-value pairs .
          [(k,v),(k,v),(k,v)]
      

      copy() :
        
          To create exactly Duplicate dictionary (cloned copy)
          d1 = d.copy();

      setdefault() :
        
          d.setdefault(k,v)
          If the key is already available then this function returns the corresponding value.
          If the key is not available then the specified key-value will be added as new item to the dictionary.


      update()  :
         
           d.update(x)
           All items present in the dictionary x will be added to dictionary d .


      
      Dictionary Comprehension :
          
             Comprehension concept applicable for dictionaries also .
             